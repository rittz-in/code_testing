   public class LinkedList 
   {

	static Node head1, head2;

	static class Node 
	{
		int data;
		Node next;

		Node(int d)
		{
			data = d;
			next = null;
		}
	}

	
	int getNode()
	{
		int count1 = getCount(head1);
		int count2 = getCount(head2);
		int difference;

		if (count1 > count2) 
		{
			difference = count1 - count2;
			return getJoiningNode(difference, head1, head2);
		}
		else 
		{
			difference = count2 - count1;
			return getJoiningNode(difference, head2, head1);
		}
	}

	int getJoiningNode(int difference, Node node1, Node node2)
	{
		int i;
		Node current1 = node1;
		Node current2 = node2;
		
		for (i = 0; i < difference; i++) 
		{
			if (current1 == null) 
			{
				return -1;
			}
			current1 = current1.next;
		}
		
		while (current1 != null && current2 != null) 
		{
			if (current1.data == current2.data) 
			{
				return current1.data;
			}
			current1 = current1.next;
			current2 = current2.next;
		}

		return -1;
	}

	//count of nodes in the list
	
	int getCount(Node node)
	{
		Node current = node;
		int count = 0;

		while (current != null) 
		{
			count++;
			current = current.next;
		}

		return count;
	}

	public static void main(String[] args)
	{
		LinkedList list = new LinkedList();

		// first linked list
		list.head1 = new Node(1);
		list.head1.next = new Node(3);
		list.head1.next.next = new Node(5);
		list.head1.next.next.next = new Node(7);
		list.head1.next.next.next.next = new Node(9);

		// second linked list
		list.head2 = new Node(4);
		list.head2.next = new Node(5);
		list.head2.next.next = new Node(7);
		list.head2.next.next.next = new Node(9);

		System.out.println("The node of joining point is " + list.getNode());
	}
}
